/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.cobbzilla.wizard.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class tResultPage implements org.apache.thrift.TBase<tResultPage, tResultPage._Fields>, java.io.Serializable, Cloneable, Comparable<tResultPage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tResultPage");

  private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SORT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("sortField", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sortOrder", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new tResultPageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new tResultPageTupleSchemeFactory());
  }

  private int pageNumber; // required
  private int pageSize; // required
  private String sortField; // required
  private tSortOrder sortOrder; // required
  private String filter; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE_NUMBER((short)1, "pageNumber"),
    PAGE_SIZE((short)2, "pageSize"),
    SORT_FIELD((short)3, "sortField"),
    /**
     * 
     * @see tSortOrder
     */
    SORT_ORDER((short)4, "sortOrder"),
    FILTER((short)5, "filter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_NUMBER
          return PAGE_NUMBER;
        case 2: // PAGE_SIZE
          return PAGE_SIZE;
        case 3: // SORT_FIELD
          return SORT_FIELD;
        case 4: // SORT_ORDER
          return SORT_ORDER;
        case 5: // FILTER
          return FILTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGENUMBER_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("pageNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("sortField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sortOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, tSortOrder.class)));
    tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tResultPage.class, metaDataMap);
  }

  public tResultPage() {
  }

  public tResultPage(
    int pageNumber,
    int pageSize,
    String sortField,
    tSortOrder sortOrder,
    String filter)
  {
    this();
    this.pageNumber = pageNumber;
    setPageNumberIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.sortField = sortField;
    this.sortOrder = sortOrder;
    this.filter = filter;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public tResultPage(tResultPage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pageNumber = other.pageNumber;
    this.pageSize = other.pageSize;
    if (other.isSetSortField()) {
      this.sortField = other.sortField;
    }
    if (other.isSetSortOrder()) {
      this.sortOrder = other.sortOrder;
    }
    if (other.isSetFilter()) {
      this.filter = other.filter;
    }
  }

  public tResultPage deepCopy() {
    return new tResultPage(this);
  }

  @Override
  public void clear() {
    setPageNumberIsSet(false);
    this.pageNumber = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    this.sortField = null;
    this.sortOrder = null;
    this.filter = null;
  }

  public int getPageNumber() {
    return this.pageNumber;
  }

  public void setPageNumber(int pageNumber) {
    this.pageNumber = pageNumber;
    setPageNumberIsSet(true);
  }

  public void unsetPageNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
  }

  /** Returns true if field pageNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
  }

  public void setPageNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUMBER_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public void setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public String getSortField() {
    return this.sortField;
  }

  public void setSortField(String sortField) {
    this.sortField = sortField;
  }

  public void unsetSortField() {
    this.sortField = null;
  }

  /** Returns true if field sortField is set (has been assigned a value) and false otherwise */
  public boolean isSetSortField() {
    return this.sortField != null;
  }

  public void setSortFieldIsSet(boolean value) {
    if (!value) {
      this.sortField = null;
    }
  }

  /**
   * 
   * @see tSortOrder
   */
  public tSortOrder getSortOrder() {
    return this.sortOrder;
  }

  /**
   * 
   * @see tSortOrder
   */
  public void setSortOrder(tSortOrder sortOrder) {
    this.sortOrder = sortOrder;
  }

  public void unsetSortOrder() {
    this.sortOrder = null;
  }

  /** Returns true if field sortOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetSortOrder() {
    return this.sortOrder != null;
  }

  public void setSortOrderIsSet(boolean value) {
    if (!value) {
      this.sortOrder = null;
    }
  }

  public String getFilter() {
    return this.filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }

  public void unsetFilter() {
    this.filter = null;
  }

  /** Returns true if field filter is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter() {
    return this.filter != null;
  }

  public void setFilterIsSet(boolean value) {
    if (!value) {
      this.filter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_NUMBER:
      if (value == null) {
        unsetPageNumber();
      } else {
        setPageNumber((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case SORT_FIELD:
      if (value == null) {
        unsetSortField();
      } else {
        setSortField((String)value);
      }
      break;

    case SORT_ORDER:
      if (value == null) {
        unsetSortOrder();
      } else {
        setSortOrder((tSortOrder)value);
      }
      break;

    case FILTER:
      if (value == null) {
        unsetFilter();
      } else {
        setFilter((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_NUMBER:
      return Integer.valueOf(getPageNumber());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case SORT_FIELD:
      return getSortField();

    case SORT_ORDER:
      return getSortOrder();

    case FILTER:
      return getFilter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_NUMBER:
      return isSetPageNumber();
    case PAGE_SIZE:
      return isSetPageSize();
    case SORT_FIELD:
      return isSetSortField();
    case SORT_ORDER:
      return isSetSortOrder();
    case FILTER:
      return isSetFilter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof tResultPage)
      return this.equals((tResultPage)that);
    return false;
  }

  public boolean equals(tResultPage that) {
    if (that == null)
      return false;

    boolean this_present_pageNumber = true;
    boolean that_present_pageNumber = true;
    if (this_present_pageNumber || that_present_pageNumber) {
      if (!(this_present_pageNumber && that_present_pageNumber))
        return false;
      if (this.pageNumber != that.pageNumber)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_sortField = true && this.isSetSortField();
    boolean that_present_sortField = true && that.isSetSortField();
    if (this_present_sortField || that_present_sortField) {
      if (!(this_present_sortField && that_present_sortField))
        return false;
      if (!this.sortField.equals(that.sortField))
        return false;
    }

    boolean this_present_sortOrder = true && this.isSetSortOrder();
    boolean that_present_sortOrder = true && that.isSetSortOrder();
    if (this_present_sortOrder || that_present_sortOrder) {
      if (!(this_present_sortOrder && that_present_sortOrder))
        return false;
      if (!this.sortOrder.equals(that.sortOrder))
        return false;
    }

    boolean this_present_filter = true && this.isSetFilter();
    boolean that_present_filter = true && that.isSetFilter();
    if (this_present_filter || that_present_filter) {
      if (!(this_present_filter && that_present_filter))
        return false;
      if (!this.filter.equals(that.filter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(tResultPage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPageNumber()).compareTo(other.isSetPageNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNumber, other.pageNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortField()).compareTo(other.isSetSortField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortField, other.sortField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortOrder()).compareTo(other.isSetSortOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortOrder, other.sortOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter()).compareTo(other.isSetFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("tResultPage(");
    boolean first = true;

    sb.append("pageNumber:");
    sb.append(this.pageNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortField:");
    if (this.sortField == null) {
      sb.append("null");
    } else {
      sb.append(this.sortField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortOrder:");
    if (this.sortOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.sortOrder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filter:");
    if (this.filter == null) {
      sb.append("null");
    } else {
      sb.append(this.filter);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class tResultPageStandardSchemeFactory implements SchemeFactory {
    public tResultPageStandardScheme getScheme() {
      return new tResultPageStandardScheme();
    }
  }

  private static class tResultPageStandardScheme extends StandardScheme<tResultPage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, tResultPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNumber = iprot.readI32();
              struct.setPageNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SORT_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortField = iprot.readString();
              struct.setSortFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortOrder = tSortOrder.findByValue(iprot.readI32());
              struct.setSortOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filter = iprot.readString();
              struct.setFilterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, tResultPage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.pageNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      if (struct.sortField != null) {
        oprot.writeFieldBegin(SORT_FIELD_FIELD_DESC);
        oprot.writeString(struct.sortField);
        oprot.writeFieldEnd();
      }
      if (struct.sortOrder != null) {
        oprot.writeFieldBegin(SORT_ORDER_FIELD_DESC);
        oprot.writeI32(struct.sortOrder.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        oprot.writeString(struct.filter);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class tResultPageTupleSchemeFactory implements SchemeFactory {
    public tResultPageTupleScheme getScheme() {
      return new tResultPageTupleScheme();
    }
  }

  private static class tResultPageTupleScheme extends TupleScheme<tResultPage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, tResultPage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPageNumber()) {
        optionals.set(0);
      }
      if (struct.isSetPageSize()) {
        optionals.set(1);
      }
      if (struct.isSetSortField()) {
        optionals.set(2);
      }
      if (struct.isSetSortOrder()) {
        optionals.set(3);
      }
      if (struct.isSetFilter()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPageNumber()) {
        oprot.writeI32(struct.pageNumber);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetSortField()) {
        oprot.writeString(struct.sortField);
      }
      if (struct.isSetSortOrder()) {
        oprot.writeI32(struct.sortOrder.getValue());
      }
      if (struct.isSetFilter()) {
        oprot.writeString(struct.filter);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, tResultPage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.pageNumber = iprot.readI32();
        struct.setPageNumberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sortField = iprot.readString();
        struct.setSortFieldIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sortOrder = tSortOrder.findByValue(iprot.readI32());
        struct.setSortOrderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.filter = iprot.readString();
        struct.setFilterIsSet(true);
      }
    }
  }

}

