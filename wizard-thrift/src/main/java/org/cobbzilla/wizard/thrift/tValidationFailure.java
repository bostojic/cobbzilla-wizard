/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.cobbzilla.wizard.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class tValidationFailure implements org.apache.thrift.TBase<tValidationFailure, tValidationFailure._Fields>, java.io.Serializable, Cloneable, Comparable<tValidationFailure> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tValidationFailure");

  private static final org.apache.thrift.protocol.TField MESSAGE_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageTemplate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INVALID_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidValue", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new tValidationFailureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new tValidationFailureTupleSchemeFactory());
  }

  private String messageTemplate; // required
  private String message; // required
  private String invalidValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE_TEMPLATE((short)1, "messageTemplate"),
    MESSAGE((short)2, "message"),
    INVALID_VALUE((short)3, "invalidValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE_TEMPLATE
          return MESSAGE_TEMPLATE;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // INVALID_VALUE
          return INVALID_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("messageTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVALID_VALUE, new org.apache.thrift.meta_data.FieldMetaData("invalidValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tValidationFailure.class, metaDataMap);
  }

  public tValidationFailure() {
  }

  public tValidationFailure(
    String messageTemplate,
    String message,
    String invalidValue)
  {
    this();
    this.messageTemplate = messageTemplate;
    this.message = message;
    this.invalidValue = invalidValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public tValidationFailure(tValidationFailure other) {
    if (other.isSetMessageTemplate()) {
      this.messageTemplate = other.messageTemplate;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetInvalidValue()) {
      this.invalidValue = other.invalidValue;
    }
  }

  public tValidationFailure deepCopy() {
    return new tValidationFailure(this);
  }

  @Override
  public void clear() {
    this.messageTemplate = null;
    this.message = null;
    this.invalidValue = null;
  }

  public String getMessageTemplate() {
    return this.messageTemplate;
  }

  public void setMessageTemplate(String messageTemplate) {
    this.messageTemplate = messageTemplate;
  }

  public void unsetMessageTemplate() {
    this.messageTemplate = null;
  }

  /** Returns true if field messageTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageTemplate() {
    return this.messageTemplate != null;
  }

  public void setMessageTemplateIsSet(boolean value) {
    if (!value) {
      this.messageTemplate = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getInvalidValue() {
    return this.invalidValue;
  }

  public void setInvalidValue(String invalidValue) {
    this.invalidValue = invalidValue;
  }

  public void unsetInvalidValue() {
    this.invalidValue = null;
  }

  /** Returns true if field invalidValue is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalidValue() {
    return this.invalidValue != null;
  }

  public void setInvalidValueIsSet(boolean value) {
    if (!value) {
      this.invalidValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE_TEMPLATE:
      if (value == null) {
        unsetMessageTemplate();
      } else {
        setMessageTemplate((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case INVALID_VALUE:
      if (value == null) {
        unsetInvalidValue();
      } else {
        setInvalidValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE_TEMPLATE:
      return getMessageTemplate();

    case MESSAGE:
      return getMessage();

    case INVALID_VALUE:
      return getInvalidValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE_TEMPLATE:
      return isSetMessageTemplate();
    case MESSAGE:
      return isSetMessage();
    case INVALID_VALUE:
      return isSetInvalidValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof tValidationFailure)
      return this.equals((tValidationFailure)that);
    return false;
  }

  public boolean equals(tValidationFailure that) {
    if (that == null)
      return false;

    boolean this_present_messageTemplate = true && this.isSetMessageTemplate();
    boolean that_present_messageTemplate = true && that.isSetMessageTemplate();
    if (this_present_messageTemplate || that_present_messageTemplate) {
      if (!(this_present_messageTemplate && that_present_messageTemplate))
        return false;
      if (!this.messageTemplate.equals(that.messageTemplate))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_invalidValue = true && this.isSetInvalidValue();
    boolean that_present_invalidValue = true && that.isSetInvalidValue();
    if (this_present_invalidValue || that_present_invalidValue) {
      if (!(this_present_invalidValue && that_present_invalidValue))
        return false;
      if (!this.invalidValue.equals(that.invalidValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(tValidationFailure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMessageTemplate()).compareTo(other.isSetMessageTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageTemplate, other.messageTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvalidValue()).compareTo(other.isSetInvalidValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidValue, other.invalidValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("tValidationFailure(");
    boolean first = true;

    sb.append("messageTemplate:");
    if (this.messageTemplate == null) {
      sb.append("null");
    } else {
      sb.append(this.messageTemplate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invalidValue:");
    if (this.invalidValue == null) {
      sb.append("null");
    } else {
      sb.append(this.invalidValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class tValidationFailureStandardSchemeFactory implements SchemeFactory {
    public tValidationFailureStandardScheme getScheme() {
      return new tValidationFailureStandardScheme();
    }
  }

  private static class tValidationFailureStandardScheme extends StandardScheme<tValidationFailure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, tValidationFailure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageTemplate = iprot.readString();
              struct.setMessageTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVALID_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invalidValue = iprot.readString();
              struct.setInvalidValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, tValidationFailure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.messageTemplate != null) {
        oprot.writeFieldBegin(MESSAGE_TEMPLATE_FIELD_DESC);
        oprot.writeString(struct.messageTemplate);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.invalidValue != null) {
        oprot.writeFieldBegin(INVALID_VALUE_FIELD_DESC);
        oprot.writeString(struct.invalidValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class tValidationFailureTupleSchemeFactory implements SchemeFactory {
    public tValidationFailureTupleScheme getScheme() {
      return new tValidationFailureTupleScheme();
    }
  }

  private static class tValidationFailureTupleScheme extends TupleScheme<tValidationFailure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, tValidationFailure struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMessageTemplate()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetInvalidValue()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMessageTemplate()) {
        oprot.writeString(struct.messageTemplate);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetInvalidValue()) {
        oprot.writeString(struct.invalidValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, tValidationFailure struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.messageTemplate = iprot.readString();
        struct.setMessageTemplateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.invalidValue = iprot.readString();
        struct.setInvalidValueIsSet(true);
      }
    }
  }

}

